

0001  void shellSort(int *vet)
          [0001, 0001] (0006, VOID                ) {void}
          [0001, 0006] (0044, IDENTIFI            ) {shellSort}
          [0001, 0015] (0025, A_PARENT            ) {(}
          [0001, 0016] (0003, INT                 ) {int}
          [0001, 0020] (0040, DEREF_MULT          ) {*}
          [0001, 0021] (0044, IDENTIFI            ) {vet}
          [0001, 0024] (0026, F_PARENT            ) {)}


0002  {
          [0002, 0001] (0021, A_CHAVE             ) {{}


0003      int i, j, value;
          [0003, 0005] (0003, INT                 ) {int}
          [0003, 0009] (0044, IDENTIFI            ) {i}
          [0003, 0010] (0019, VIRGULA             ) {,}
          [0003, 0012] (0044, IDENTIFI            ) {j}
          [0003, 0013] (0019, VIRGULA             ) {,}
          [0003, 0015] (0044, IDENTIFI            ) {value}
          [0003, 0020] (0020, P_VIRG              ) {;}


0004      int size = len(vet);
          [0004, 0005] (0003, INT                 ) {int}
          [0004, 0009] (0044, IDENTIFI            ) {size}
          [0004, 0014] (0037, OP_IGUAL            ) {=}
          [0004, 0016] (0044, IDENTIFI            ) {len}
          [0004, 0019] (0025, A_PARENT            ) {(}
          [0004, 0020] (0044, IDENTIFI            ) {vet}
          [0004, 0023] (0026, F_PARENT            ) {)}
          [0004, 0024] (0020, P_VIRG              ) {;}


0005      int h = 1;
          [0005, 0005] (0003, INT                 ) {int}
          [0005, 0009] (0044, IDENTIFI            ) {h}
          [0005, 0011] (0037, OP_IGUAL            ) {=}
          [0005, 0013] (0016, L_INT               ) {1}
          [0005, 0014] (0020, P_VIRG              ) {;}


0006      


0007      while (h < size) {
          [0007, 0005] (0027, WHILE               ) {while}
          [0007, 0011] (0025, A_PARENT            ) {(}
          [0007, 0012] (0044, IDENTIFI            ) {h}
          [0007, 0014] (0034, OP_MENOR            ) {<}
          [0007, 0016] (0044, IDENTIFI            ) {size}
          [0007, 0020] (0026, F_PARENT            ) {)}
          [0007, 0022] (0021, A_CHAVE             ) {{}


0008          h = 3 * h + 1;
          [0008, 0009] (0044, IDENTIFI            ) {h}
          [0008, 0011] (0037, OP_IGUAL            ) {=}
          [0008, 0013] (0016, L_INT               ) {3}
          [0008, 0015] (0040, DEREF_MULT          ) {*}
          [0008, 0017] (0044, IDENTIFI            ) {h}
          [0008, 0019] (0038, OP_ADIC             ) {+}
          [0008, 0021] (0016, L_INT               ) {1}
          [0008, 0022] (0020, P_VIRG              ) {;}


0009      }
          [0009, 0005] (0022, F_CHAVE             ) {}}


0010  


0011      while (h > 0) {
          [0011, 0005] (0027, WHILE               ) {while}
          [0011, 0011] (0025, A_PARENT            ) {(}
          [0011, 0012] (0044, IDENTIFI            ) {h}
          [0011, 0014] (0033, OP_MAIOR            ) {>}
          [0011, 0016] (0016, L_INT               ) {0}
          [0011, 0017] (0026, F_PARENT            ) {)}
          [0011, 0019] (0021, A_CHAVE             ) {{}


0012          for(i : (h, size, 1) {
          [0012, 0009] (0029, FOR                 ) {for}
          [0012, 0012] (0025, A_PARENT            ) {(}
          [0012, 0013] (0044, IDENTIFI            ) {i}
          [0012, 0015] (0045, DOIS_PONT           ) {:}
          [0012, 0017] (0025, A_PARENT            ) {(}
          [0012, 0018] (0044, IDENTIFI            ) {h}
          [0012, 0019] (0019, VIRGULA             ) {,}
          [0012, 0021] (0044, IDENTIFI            ) {size}
          [0012, 0025] (0019, VIRGULA             ) {,}
          [0012, 0027] (0016, L_INT               ) {1}
          [0012, 0028] (0026, F_PARENT            ) {)}
          [0012, 0030] (0021, A_CHAVE             ) {{}


0013              value = vet[i];
          [0013, 0013] (0044, IDENTIFI            ) {value}
          [0013, 0019] (0037, OP_IGUAL            ) {=}
          [0013, 0021] (0044, IDENTIFI            ) {vet}
          [0013, 0024] (0023, A_COLCHETE          ) {[}
          [0013, 0025] (0044, IDENTIFI            ) {i}
          [0013, 0026] (0024, F_COLCHETE          ) {]}
          [0013, 0027] (0020, P_VIRG              ) {;}


0014              j = i;
          [0014, 0013] (0044, IDENTIFI            ) {j}
          [0014, 0015] (0037, OP_IGUAL            ) {=}
          [0014, 0017] (0044, IDENTIFI            ) {i}
          [0014, 0018] (0020, P_VIRG              ) {;}


0015              while (j > h-1 && value <= vet[j - h]) {
          [0015, 0013] (0027, WHILE               ) {while}
          [0015, 0019] (0025, A_PARENT            ) {(}
          [0015, 0020] (0044, IDENTIFI            ) {j}
          [0015, 0022] (0033, OP_MAIOR            ) {>}
          [0015, 0024] (0044, IDENTIFI            ) {h}
          [0015, 0025] (0039, OP_SUB              ) {-}
          [0015, 0026] (0016, L_INT               ) {1}
          [0015, 0028] (0032, OP_E                ) {&&}
          [0015, 0031] (0044, IDENTIFI            ) {value}
          [0015, 0037] (0036, OP_ME_IG            ) {<=}
          [0015, 0040] (0044, IDENTIFI            ) {vet}
          [0015, 0043] (0023, A_COLCHETE          ) {[}
          [0015, 0044] (0044, IDENTIFI            ) {j}
          [0015, 0046] (0039, OP_SUB              ) {-}
          [0015, 0048] (0044, IDENTIFI            ) {h}
          [0015, 0049] (0024, F_COLCHETE          ) {]}
          [0015, 0050] (0026, F_PARENT            ) {)}
          [0015, 0052] (0021, A_CHAVE             ) {{}


0016                  vet[j] = vet[j - h];
          [0016, 0017] (0044, IDENTIFI            ) {vet}
          [0016, 0020] (0023, A_COLCHETE          ) {[}
          [0016, 0021] (0044, IDENTIFI            ) {j}
          [0016, 0022] (0024, F_COLCHETE          ) {]}
          [0016, 0024] (0037, OP_IGUAL            ) {=}
          [0016, 0026] (0044, IDENTIFI            ) {vet}
          [0016, 0029] (0023, A_COLCHETE          ) {[}
          [0016, 0030] (0044, IDENTIFI            ) {j}
          [0016, 0032] (0039, OP_SUB              ) {-}
          [0016, 0034] (0044, IDENTIFI            ) {h}
          [0016, 0035] (0024, F_COLCHETE          ) {]}
          [0016, 0036] (0020, P_VIRG              ) {;}


0017                  j = j - h;
          [0017, 0017] (0044, IDENTIFI            ) {j}
          [0017, 0019] (0037, OP_IGUAL            ) {=}
          [0017, 0021] (0044, IDENTIFI            ) {j}
          [0017, 0023] (0039, OP_SUB              ) {-}
          [0017, 0025] (0044, IDENTIFI            ) {h}
          [0017, 0026] (0020, P_VIRG              ) {;}


0018              }
          [0018, 0013] (0022, F_CHAVE             ) {}}


0019              vet[j] = value;
          [0019, 0013] (0044, IDENTIFI            ) {vet}
          [0019, 0016] (0023, A_COLCHETE          ) {[}
          [0019, 0017] (0044, IDENTIFI            ) {j}
          [0019, 0018] (0024, F_COLCHETE          ) {]}
          [0019, 0020] (0037, OP_IGUAL            ) {=}
          [0019, 0022] (0044, IDENTIFI            ) {value}
          [0019, 0027] (0020, P_VIRG              ) {;}


0020          }
          [0020, 0009] (0022, F_CHAVE             ) {}}


0021          h = h/3;
          [0021, 0009] (0044, IDENTIFI            ) {h}
          [0021, 0011] (0037, OP_IGUAL            ) {=}
          [0021, 0013] (0044, IDENTIFI            ) {h}
          [0021, 0014] (0041, OP_DIV              ) {/}
          [0021, 0015] (0016, L_INT               ) {3}
          [0021, 0016] (0020, P_VIRG              ) {;}


0022      }
          [0022, 0005] (0022, F_CHAVE             ) {}}


0023  }
          [0023, 0001] (0022, F_CHAVE             ) {}}


0024  


0025  int main()
          [0025, 0001] (0003, INT                 ) {int}
          [0025, 0005] (0009, MAIN                ) {main}
          [0025, 0009] (0025, A_PARENT            ) {(}
          [0025, 0010] (0026, F_PARENT            ) {)}


0026  {
          [0026, 0001] (0021, A_CHAVE             ) {{}


0027      int size;
          [0027, 0005] (0003, INT                 ) {int}
          [0027, 0009] (0044, IDENTIFI            ) {size}
          [0027, 0013] (0020, P_VIRG              ) {;}


0028      scan(size)
          [0028, 0005] (0028, SCAN                ) {scan}
          [0028, 0009] (0025, A_PARENT            ) {(}
          [0028, 0010] (0044, IDENTIFI            ) {size}
          [0028, 0014] (0026, F_PARENT            ) {)}


0029  


0030      int array[size];
          [0030, 0005] (0003, INT                 ) {int}
          [0030, 0009] (0044, IDENTIFI            ) {array}
          [0030, 0014] (0023, A_COLCHETE          ) {[}
          [0030, 0015] (0044, IDENTIFI            ) {size}
          [0030, 0019] (0024, F_COLCHETE          ) {]}
          [0030, 0020] (0020, P_VIRG              ) {;}


0031  


0032      for(int i : (0, size, 1)) {
          [0032, 0005] (0029, FOR                 ) {for}
          [0032, 0008] (0025, A_PARENT            ) {(}
          [0032, 0009] (0003, INT                 ) {int}
          [0032, 0013] (0044, IDENTIFI            ) {i}
          [0032, 0015] (0045, DOIS_PONT           ) {:}
          [0032, 0017] (0025, A_PARENT            ) {(}
          [0032, 0018] (0016, L_INT               ) {0}
          [0032, 0019] (0019, VIRGULA             ) {,}
          [0032, 0021] (0044, IDENTIFI            ) {size}
          [0032, 0025] (0019, VIRGULA             ) {,}
          [0032, 0027] (0016, L_INT               ) {1}
          [0032, 0028] (0026, F_PARENT            ) {)}
          [0032, 0029] (0026, F_PARENT            ) {)}
          [0032, 0031] (0021, A_CHAVE             ) {{}


0033          scan(array[i])
          [0033, 0009] (0028, SCAN                ) {scan}
          [0033, 0013] (0025, A_PARENT            ) {(}
          [0033, 0014] (0044, IDENTIFI            ) {array}
          [0033, 0019] (0023, A_COLCHETE          ) {[}
          [0033, 0020] (0044, IDENTIFI            ) {i}
          [0033, 0021] (0024, F_COLCHETE          ) {]}
          [0033, 0022] (0026, F_PARENT            ) {)}


0034      }
          [0034, 0005] (0022, F_CHAVE             ) {}}


0035  


0036      for(int i : (0, size, 1)) {
          [0036, 0005] (0029, FOR                 ) {for}
          [0036, 0008] (0025, A_PARENT            ) {(}
          [0036, 0009] (0003, INT                 ) {int}
          [0036, 0013] (0044, IDENTIFI            ) {i}
          [0036, 0015] (0045, DOIS_PONT           ) {:}
          [0036, 0017] (0025, A_PARENT            ) {(}
          [0036, 0018] (0016, L_INT               ) {0}
          [0036, 0019] (0019, VIRGULA             ) {,}
          [0036, 0021] (0044, IDENTIFI            ) {size}
          [0036, 0025] (0019, VIRGULA             ) {,}
          [0036, 0027] (0016, L_INT               ) {1}
          [0036, 0028] (0026, F_PARENT            ) {)}
          [0036, 0029] (0026, F_PARENT            ) {)}
          [0036, 0031] (0021, A_CHAVE             ) {{}


0037          print(array[i])
          [0037, 0009] (0013, PRINT               ) {print}
          [0037, 0014] (0025, A_PARENT            ) {(}
          [0037, 0015] (0044, IDENTIFI            ) {array}
          [0037, 0020] (0023, A_COLCHETE          ) {[}
          [0037, 0021] (0044, IDENTIFI            ) {i}
          [0037, 0022] (0024, F_COLCHETE          ) {]}
          [0037, 0023] (0026, F_PARENT            ) {)}


0038      }
          [0038, 0005] (0022, F_CHAVE             ) {}}


0039      


0040      shellSort(&array);
          [0040, 0005] (0044, IDENTIFI            ) {shellSort}
          [0040, 0014] (0025, A_PARENT            ) {(}
          [0040, 0015] (0046, OP_REF              ) {&}
          [0040, 0016] (0044, IDENTIFI            ) {array}
          [0040, 0021] (0026, F_PARENT            ) {)}
          [0040, 0022] (0020, P_VIRG              ) {;}


0041  


0042      for(int i : (0, size, 1)) {
          [0042, 0005] (0029, FOR                 ) {for}
          [0042, 0008] (0025, A_PARENT            ) {(}
          [0042, 0009] (0003, INT                 ) {int}
          [0042, 0013] (0044, IDENTIFI            ) {i}
          [0042, 0015] (0045, DOIS_PONT           ) {:}
          [0042, 0017] (0025, A_PARENT            ) {(}
          [0042, 0018] (0016, L_INT               ) {0}
          [0042, 0019] (0019, VIRGULA             ) {,}
          [0042, 0021] (0044, IDENTIFI            ) {size}
          [0042, 0025] (0019, VIRGULA             ) {,}
          [0042, 0027] (0016, L_INT               ) {1}
          [0042, 0028] (0026, F_PARENT            ) {)}
          [0042, 0029] (0026, F_PARENT            ) {)}
          [0042, 0031] (0021, A_CHAVE             ) {{}


0043          print("%d", array[i])
          [0043, 0009] (0013, PRINT               ) {print}
          [0043, 0014] (0025, A_PARENT            ) {(}
          [0043, 0015] (0014, L_STR               ) {"%d"}
          [0043, 0019] (0019, VIRGULA             ) {,}
          [0043, 0021] (0044, IDENTIFI            ) {array}
          [0043, 0026] (0023, A_COLCHETE          ) {[}
          [0043, 0027] (0044, IDENTIFI            ) {i}
          [0043, 0028] (0024, F_COLCHETE          ) {]}
          [0043, 0029] (0026, F_PARENT            ) {)}


0044      }
          [0044, 0005] (0022, F_CHAVE             ) {}}


0045  


0046      return 0;
          [0046, 0005] (0010, RETORNO             ) {return}
          [0046, 0012] (0016, L_INT               ) {0}
          [0046, 0013] (0020, P_VIRG              ) {;}


0047  }
          [0047, 0001] (0022, F_CHAVE             ) {}}
